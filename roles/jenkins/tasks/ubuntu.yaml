---
  # Создание директории для хранения данных и конфигурации Jenkins.
  - name: Create Jenkins directory on Ubuntu
    file:
      state: directory
      path: "{{ item.path }}"
      mode: "{{ ubuntu_jenkins_mode_dir }}"
      owner: "1000"
      group: "1000"
    with_items:
      - { path: "{{ ubuntu_jenkins_data_dir }}" }
      - { path: "{{ ubuntu_jenkins_config_dir }}" }
    tags: ubuntu

  # Копирование файлов из директории ./roles/jenkins/files и их последующая передача в директорию jenkins_config.
  - name: Copy docker files in directory jenkins_config on Ubuntu
    copy:
      src: files/
      dest: "{{ ubuntu_jenkins_config_dir }}"
      mode: "{{ ubuntu_jenkins_mode_dir }}"
      owner: "1000"
      group: "1000"
    tags: ubuntu

  # Копирование файлов из директории ./roles/jenkins/templates и их последующая передача в директорию jenkins_config.
  - name: Copy template jenkins.yaml in directory jenkins_config on Ubuntu
    template:
      src: templates/jenkins.yaml
      dest: "{{ ubuntu_jenkins_config_dir }}/jenkins.yaml"
      mode: "{{ ubuntu_jenkins_mode_dir }}"
      owner: "1000"
      group: "1000"
    tags: ubuntu

  # Пул образа Jenkins с Docker Hub на удаленном хосте.
  - name: Pull the Jenkins docker image on Ubuntu from Docker Hub
    docker_image:
      name: "{{ ubuntu_jenkins_image }}"
    tags: ubuntu

  # Запуск Docker-compose на удаленном хосте.
  - name: Run Jenkins via docker-compose on Ubuntu
    docker_compose:
      build: yes
      files: jenkins-docker-compose.yaml
      project_src: "{{ ubuntu_jenkins_config_dir }}"
      recreate: always
    register: output
  - debug:
      var: output
    tags: ubuntu

  # Опциональные задачи: Дело в том, что при каждом прогоне через Ansible создается новый образ (если были изменения в Dockerfile), при этом старые не удаляются сами по себе.
  # Задачи, описанные ниже, решают данную проблему. Это было нужно мне, пока я занимался отладкой, но не факт, что понадобится вам.

  # - name: Get details of all images on Ubuntu
  #   docker_host_info:
  #     images: yes
  #     verbose_output: yes
  #   register: image_info
  #   tags: jenkins

  # - name: Remove all unused images on Ubuntu
  #   docker_image:
  #     name: "{{ item }}"
  #     state: absent
  #   with_items: "{{ image_info.images | map(attribute='Id') | list }}"
  #   ignore_errors: true
  #   tags: jenkins
